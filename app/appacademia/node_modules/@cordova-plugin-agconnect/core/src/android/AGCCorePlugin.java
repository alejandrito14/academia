/*
 * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.cordova.agconnect.core;

import android.content.Context;
import android.util.Log;

import com.huawei.agconnect.AGConnectApp;
import com.huawei.agconnect.AGConnectInstance;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;
import org.json.JSONArray;
import org.json.JSONException;


/**
 * This class echoes a string called from JavaScript.
 */
public class AGCCorePlugin extends CordovaPlugin {
    @Override
    protected void pluginInitialize() {
        if (AGConnectInstance.getInstance() == null) {
            final Context context = this.cordova.getActivity().getApplicationContext();
            AGConnectInstance.initialize(context);
        }
    }

    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        if ("setApiKey".equals(action)) {
            this.setApiKey(callbackContext, args.getString(0));
            return true;
        } else if ("setClientId".equals(action)) {
            this.setClientId(callbackContext, args.getString(0));
            return true;
        } else if ("setClientSecret".equals(action)) {
            this.setClientSecret(callbackContext, args.getString(0));
            return true;
        } else {
            return false;
        }
    }

    private void setApiKey(CallbackContext callbackContext, String apiKey) {
        cordova.getThreadPool().execute(new Runnable() {
            public void run() {
                try {
                    Log.d("AGC_LOG", "func setApiKey");
                    AGConnectApp.getInstance().setApiKey(apiKey);
                    callbackContext.success();
                } catch (Exception e) {
                    callbackContext.error(e.getMessage());
                }
            }
        });
    }

    private void setClientId(CallbackContext callbackContext, String clientId) {
        cordova.getThreadPool().execute(new Runnable() {
            public void run() {
                try {
                    Log.d("AGC_LOG", "func setClientId");
                    AGConnectApp.getInstance().setClientId(clientId);
                    callbackContext.success();
                } catch (Exception e) {
                    callbackContext.error(e.getMessage());
                }
            }
        });
    }

    private void setClientSecret(CallbackContext callbackContext, String clientSecret) {
        cordova.getThreadPool().execute(new Runnable() {
            public void run() {
                try {
                    Log.d("AGC_LOG", "func setClientSecret");
                    AGConnectApp.getInstance().setClientSecret(clientSecret);
                    callbackContext.success();
                } catch (Exception e) {
                    callbackContext.error(e.getMessage());
                }
            }
        });
    }
}
